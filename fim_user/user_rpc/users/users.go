// Code generated by goctl. DO NOT EDIT.
// Source: user_rpc.proto

package users

import (
	"context"

	"fim/fim_user/user_rpc/types/user_grpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FriendInfoRequest     = user_grpc.FriendInfoRequest
	FriendInfoResponse    = user_grpc.FriendInfoResponse
	UserConfUpdateRequest = user_grpc.UserConfUpdateRequest
	UserCreateRequest     = user_grpc.UserCreateRequest
	UserCreateResponse    = user_grpc.UserCreateResponse
	UserInfoRequest       = user_grpc.UserInfoRequest
	UserInfoResponse      = user_grpc.UserInfoResponse
	UserInfoUpdateRequest = user_grpc.UserInfoUpdateRequest
	VerifyQuestion        = user_grpc.VerifyQuestion

	Users interface {
		CreateUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UserInfoUpdate(ctx context.Context, in *UserInfoUpdateRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UserConfUpdate(ctx context.Context, in *UserConfUpdateRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UserConf(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		FriendInfo(ctx context.Context, in *FriendInfoRequest, opts ...grpc.CallOption) (*FriendInfoResponse, error)
	}

	defaultUsers struct {
		cli zrpc.Client
	}
)

func NewUsers(cli zrpc.Client) Users {
	return &defaultUsers{
		cli: cli,
	}
}

func (m *defaultUsers) CreateUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error) {
	client := user_grpc.NewUsersClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUsers) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user_grpc.NewUsersClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUsers) UserInfoUpdate(ctx context.Context, in *UserInfoUpdateRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user_grpc.NewUsersClient(m.cli.Conn())
	return client.UserInfoUpdate(ctx, in, opts...)
}

func (m *defaultUsers) UserConfUpdate(ctx context.Context, in *UserConfUpdateRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user_grpc.NewUsersClient(m.cli.Conn())
	return client.UserConfUpdate(ctx, in, opts...)
}

func (m *defaultUsers) UserConf(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user_grpc.NewUsersClient(m.cli.Conn())
	return client.UserConf(ctx, in, opts...)
}

func (m *defaultUsers) FriendInfo(ctx context.Context, in *FriendInfoRequest, opts ...grpc.CallOption) (*FriendInfoResponse, error) {
	client := user_grpc.NewUsersClient(m.cli.Conn())
	return client.FriendInfo(ctx, in, opts...)
}
