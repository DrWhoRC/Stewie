syntax = "proto3";
package user_grpc;
option go_package = "./user_grpc";

message UserCreateRequest{
    string nickname = 1;
    string password = 2;
    int32 role = 3;
    string avatar = 4;
    string open_id = 5;
}
message UserCreateResponse{
    int32 user_id = 1;
}

message UserInfoRequest{
    uint32 user_id = 1;
}

message UserInfoResponse{
    bytes data = 1; //user and userconfig json
}
message UserInfoUpdateRequest{
    uint32 user_id = 1;
    string nickname = 2;
    int32 role = 3;
    string abstract = 4;
    string avatar = 5;
}
message UserConfUpdateRequest{
    uint32 userid = 1;
    bool online = 2;
    string recallmsg = 3;
    bool friendOnlineNotify = 4;
    bool mute = 5;
    bool secureLink = 6;
    bool savePwd = 7;
    int32 searchUser = 8;
    int32 verification = 9;
    VerifyQuestion verifyQuestion = 10;
}
message VerifyQuestion{
    string q1 = 1;
    string a1 = 2;
    string q2 = 3;
    string a2 = 4;
    string q3 = 5;
    string a3 = 6;
}
message FriendInfoRequest{
    uint32 user_id = 1;
    uint32 friend_id = 2;
}
message FriendInfoResponse{
    bytes data = 1; //user and userconfig json
}

message IsFriendRequest{
    uint32 user_id = 1;
    uint32 friend_id = 2;
}
message IsFriendResponse{
    bool IsFriend = 1;
}


service Users{
    rpc CreateUser(UserCreateRequest) returns (UserCreateResponse);
    rpc UserInfo(UserInfoRequest) returns (UserInfoResponse);
    rpc UserInfoUpdate(UserInfoUpdateRequest) returns (UserInfoResponse);
    rpc UserConfUpdate(UserConfUpdateRequest)returns (UserInfoResponse);
    rpc UserConf(UserInfoRequest) returns (UserInfoResponse);
    rpc FriendInfo(FriendInfoRequest) returns (FriendInfoResponse);
    rpc IsFriend(IsFriendRequest) returns (IsFriendResponse);
}

//goctl rpc protoc user_rpc.proto --go_out=./types --go-grpc_out=./types --zrpc_out=.
