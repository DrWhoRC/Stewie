syntax = "v1"

type UserInfoRequest {
	UserId uint `header:"UserId"`
}

type UserInfoResponse {
	Id       uint   `json:"id"`
	Nickname string `json:"nickname"`
	Role     int8   `json:"role"`
	Abstract string `json:"abstract"`
	Avatar   string `json:"avatar"`
}

type VerifyQuestion {
	Q1 *string `json:"q1"`
	A1 *string `json:"a1"`
	Q2 *string `json:"q2"`
	A2 *string `json:"a2"`
	Q3 *string `json:"q3"`
	A3 *string `json:"a3"`
}

type UserConfResponse {
	UserId             uint           `header:"UserId"`
	Online             bool           `json:"online,optional" user_conf:"online"` //是否在线
	RecallMsg          string         `gorm:"size:32" json:"recallMsg,optional" user_conf:"recallMsg"` //撤回消息的提示内容
	FriendOnlineNotify bool           `json:"friendOnlineNotify,optional" user_conf:"friendOnlineNotify"` //好友上线通知
	Mute               bool           `json:"mute,optional" user_conf:"mute"` //是否静音
	SecureLink         bool           `json:"secureLink,optional" user_conf:"secureLink"` //是否使用安全链接
	SavePwd            bool           `json:"savePwd,optional" user_conf:"savePwd"` //是否保存密码
	SearchUser         int8           `json:"searchUser,optional" user_conf:"searchUser"` //是否允许搜索用户:0-no; 1-IDsearch; 2-Nicknamesearch
	Verification       int8           `json:"verification,optional" user_conf:"verification"` //好友验证方式:0-no; 1-need verifyMSG; 2-need answer; 3-need answer correct; 4-allow everyone
	VerifyQuestion     VerifyQuestion `json:"verifyQuestion,optional" user_conf:"verifyQuestion"` //验证问题: Only needed when friendVerify=2 or 3
}

type UserConfUpdateRequest {
	UserId             uint            `header:"UserId"`
	Online             *bool           `json:"online,optional" user_conf:"online"` //是否在线
	RecallMsg          *string         `gorm:"size:32" json:"recallMsg,optional" user_conf:"recallMsg"` //撤回消息的提示内容
	FriendOnlineNotify *bool           `json:"friendOnlineNotify,optional" user_conf:"friendOnlineNotify"` //好友上线通知
	Mute               *bool           `json:"mute,optional" user_conf:"mute"` //是否静音
	SecureLink         *bool           `json:"secureLink,optional" user_conf:"secureLink"` //是否使用安全链接
	SavePwd            *bool           `json:"savePwd,optional" user_conf:"savePwd"` //是否保存密码
	SearchUser         *int8           `json:"searchUser,optional" user_conf:"searchUser"` //是否允许搜索用户:0-no; 1-IDsearch; 2-Nicknamesearch
	Verification       *int8           `json:"verification,optional" user_conf:"verification"` //好友验证方式:0-no; 1-need verifyMSG; 2-need answer; 3-need answer correct; 4-allow everyone
	VerifyQuestion     *VerifyQuestion `json:"verifyQuestion,optional" user_conf:"verifyQuestion"` //验证问题: Only needed when friendVerify=2 or 3
}

type UserConfUpdateResponse {
	Data string `json:"data"`
}

type UserInfoUpdateRequest {
	UserId   uint    `header:"UserId"`
	Nickname *string `json:"nickname,optional"`
	Role     *int8   `json:"role,optional"`
	Abstract *string `json:"abstract,optional"`
	Avatar   *string `json:"avatar,optional"`
}

type UserInfoUpdateResponse {
	Data string `json:"data"`
}

type FriendInfoRequest {
	UserId   uint `header:"UserId"`
	FriendId uint `json:"friendId"` //好友id
}

type FriendInfoResponse {
	Id       uint   `json:"id"`
	Nickname string `json:"nickname"`
	Role     int8   `json:"role"`
	Abstract string `json:"abstract"`
	Avatar   string `json:"avatar"`
	Notice   string `json:"notice"`
}

type FriendListRequest {
	UserId uint `header:"UserId"`
	Role   int8 `header:"Role"`
	Page   int  `form:"page"`
	Limit  int  `form:"limit"`
}

type FriendListResponse {
	List  []FriendInfoResponse `json:"list"`
	Count int                  `json:"count"`
}

type FriendNoticeUpdateRequest {
	UserId   uint   `header:"UserId"`
	FriendId uint   `json:"friendId"` //好友id
	Notice   string `json:"notice"` //好友备注
}

type FriendNoticeUpdateResponse {
	Data string `json:"data"`
}

type SearchRequest {
	UserId uint   `header:"UserId"`
	Key    string `form:"key"` //id and nickname of users
	Online bool   `form:"online"` //online users
	Page   int    `form:"page"`
	Limit  int    `form:"limit"`
}

type SearchInfo {
	Id       uint   `json:"id"`
	Nickname string `json:"nickname"`
	Abstract string `json:"abstract"`
	Avatar   string `json:"avatar"`
	IsFriend bool   `json:"isFriend"` //is friend or not
}

type SearchResponse {
	List  []SearchInfo `json:"list"`
	Count int          `json:"count"`
}

type UserValidRequest {
	UserId   uint   `header:"UserId"`
	FriendId uint   `json:"friendId"`
	ValidMsg string `json:"validMsg,optional"`
}

type UserValidResponse {
	Verification   int8           `json:"verification"`
	VerifyQuestion VerifyQuestion `json:"verifyQuestion"`
	Data           string         `json:"data"`
}

type ValidAnswerRequest {
	UserId         uint           `header:"UserId"`
	FriendId       uint           `json:"friendId"`
	VerifyQuestion VerifyQuestion `json:"verifyQuestion,optional"`
}

type ValidAnswerResponse {
	Data string `json:"data"`
}

type VerifyMessageRequest {
	SenderId       uint           `header:"SenderId"`
	ReceiverId     uint           `header:"ReceiverId"`
	Agree          int            `json:"agree"`
	Data           string         `json:"data,optional"`
	VerifyQuestion VerifyQuestion `json:"verifyQuestion,optional"`
}

type VerifyMessageResponse {
	Data string `json:"data"`
}

type FriendDeleteRequest {
	UserId   uint `header:"UserId"`
	FriendId uint `json:"friendId"`
}

type FriendDeleteResponse {
	Data string `json:"data"`
}

service users {
	@handler GetUserInfo
	post /api/user/user_info (UserInfoRequest) returns (UserInfoResponse)

	@handler GetUserConf
	post /api/user/user_conf (UserInfoRequest) returns (UserConfResponse)

	@handler GetFriendInfo
	post /api/user/friend_info (FriendInfoRequest) returns (FriendInfoResponse)

	@handler UserInfoUpdate
	put /api/user/user_info_update (UserInfoUpdateRequest) returns (UserInfoUpdateResponse)

	@handler UserConfUpdate
	put /api/user/user_conf_update (UserConfUpdateRequest) returns (UserConfUpdateResponse)

	@handler GetFriendList
	post /api/user/friend_list (FriendListRequest) returns (FriendListResponse)

	@handler FrinedNoticeUpdate
	put /api/user/friend_notice_update (FriendNoticeUpdateRequest) returns (FriendNoticeUpdateResponse)

	@handler SearchFriend
	get /api/user/search_friend (SearchRequest) returns (SearchResponse)

	@handler UserValid
	get /api/user/user_valid (UserValidRequest) returns (UserValidResponse)

	@handler ValidAnswer
	post /api/user/valid_answer (ValidAnswerRequest) returns (ValidAnswerResponse)

	@handler VerifyMessage
	post /api/user/verify_message (VerifyMessageRequest) returns (VerifyMessageResponse)

	@handler FriendDelete
	delete /api/user/friend_delete (FriendDeleteRequest) returns (FriendDeleteResponse)
}

//goctl api go -api user_api.api -dir .
